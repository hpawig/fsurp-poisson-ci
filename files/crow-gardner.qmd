---
title: "Crow-Gardner Method"
format: html
editor: visual
---

```{r}
#| echo: false
#| message: false
library(tidyverse)
```

## AC max coord function

```{r}
# given AC a-b, this function calculates the maximum's coordinates: (lambda, max-prob)
AC_max_coords <- function(a,b) {
   # using prop 2.2a formula. 
  lambda <- prod(a:b)^(1/(b-a+1)) #prop 2.2a
  
  if (a == 0) {
    max_prob <- ppois(b, lambda) # special case of calculating cdf when a is 0
  } else {
    max_prob <- ppois(b, lambda) - ppois(a-1, lambda)
    # general formula
  }
  
  return(data.frame(lambda, max_prob))
}


```

## 

## test coverage function

```{r}
test_coverage <- function(A,B, conf.level) {
  
   # this is maximum prob for current cardinality curve

    max_prob <- AC_max_coords(A, B)$max_prob
  
    # cases to decide how to change a-b: look at if max is above conf level
    
    if (max_prob > conf.level) {
      
      
      
        return(TRUE)
    
      } else {
      
      return(FALSE)
    }
}
```

## main function

```{r}
# K = largest number of x to create a CI for.
CG <- function(K, conf.level, all = FALSE) {
  x <- c(0:K)

  # initialize necessary vectors
  lower <- c()
  upper <- c()

  # step 1  
  a <- 0 # starting a
  b <- 0 # starting b
  lower[1] <- 0



   while (a < (K+1)) {

     if((test_coverage(a+1, b+1, conf.level) == T)) { # check AC {a+1}-{b+1} first

      a <- a + 1
      b <- b + 1   

             
       # setting coincidental endpoints
        # current b's lower bound where (a+1)-(b+1) rises above conf.level
        lower[b+1] <- find_roots(a,b,conf.level)$root1
        
         # a-1's upper bound is also where (a+1)-(b+1) curve comes above CI
          upper[a] <- lower[b+1]     
       
 
        # check next AC by increasing cardinality by 1 but also ensure {a} non-decreasing       
      } else if ((test_coverage(a+1, b+2, conf.level) == F)) { 

        lower[(b+1)+1] <- find_roots(a,b,conf.level)$root2 # lower limit for (a+1), aka new b
        b <- b + 1   

        }  else if (test_coverage(a+1, b+2, conf.level) == T) {

          # setting coincidental endpoint
          # identical lower endpoint when AC {a+1}--{b+2} is above conf.level
          lower[(b+2)+1] <- find_roots(a,b,conf.level)$root2 # b+2's lower bound
          lower[(b+1)+1] <- lower[b+3]  # b+1's lower bound
          upper[a+1] <- find_roots(a,b,conf.level)$root2  # a's upper bound

          a <- a + 1
          b <- b + 2
             
           } 
  }
  
  lower <- lower[1:(K+1)]
  upper <- upper[1:(K+1)]
  x <- x[1:(K+1)] # ensuring all vectors are equal in length. 
                          # b/c extra lower endpoints will be cut off


  CIs <- data.frame(x,lower,upper)
  
  # all=TRUE represents display all intervals from x=0 to x=observed/user input
  # use filter to keep rows of the data set "CI" where x = observed (K) and discards those where x != K
  # to get only 1 row for observed x's CI
  if (all == FALSE) {
    CIs <- CIs |> 
      filter(x == K)
  }
  return(CIs)
}


# Example
CIs <- CG(50,0.95,T); CIs
```

\

```{r}
# code to graph a specific AC for troubleshooting

# CG function was having issues in uniroot() when trying to get upper bound for x = 22.
# Looking at AC 23-45, 22-44, and 21-43 to see where we should be searching to 
# avoid uniroot() error.

plot(y = ppois(45, seq(30,34,0.0001))-ppois(22,seq(30,34,0.0001)), x = seq(30,34, by = 0.0001), # AC 23-45
               type = "l", xlim = c(30,40), ylim = c(0.90,1), col = "pink",
     xlab = expression(lambda),
     ylab = "Coverage Probability",
     main = expression("Poisson("~lambda~")"))

# lines(y = (ppois(44, seq(30, 34, by = 0.0001)) - ppois(21, seq(30,34,0.0001))), # AC 22-44
#       x = seq(30, 34, by = 0.0001), type = "l")
lines(y = (ppois(43, seq(30, 34, by = 0.0001)) - ppois(20, seq(30,34,0.0001))), # AC 21-43
      x = seq(30, 34, by = 0.0001), type = "l")

# abline(v=3.764351, col="blue")
 abline(v = 32.315, col = "red")
  abline(v = 33.33612, col = "red") 
abline(h = 0.95, col = "red")


# AC_max_coords(22,44)
# AC_max_coords(23,45)
```

## graph CPF

```{r}
# creating a coverage probability function given one lambda for CG method
# WARNING: takes a very long time to run! (like 3-6 hours)
CG_CP <- function(max_lambda, conf.level = 0.95) {

  lambda_vec <- seq(0, max_lambda, 0.01)
  coverages_CG <- c() # this vector will contain all coverage probabilities for each lambda in lambda_vec
  
  CI_temp <- CG(100, conf.level,T)
  for (i in 1:length(lambda_vec)) {
    captured <- c() # initialize vector that keeps x's which produce CIs that capture current lambda
    p <- 0
    
    for (x in 0:100) {
      
    
      # sum pmf of each x that captures lambda in its CI
      if (dplyr::between(lambda_vec[i], CI_temp$lower[x+1], CI_temp$upper[x+1]) == TRUE) {
        p <- p + dpois(x, lambda = lambda_vec[i])
      }
    }
    coverages_CG <- c(coverages_CG, p) # add coverage prob to its corresponding vector
  }
    

  
 # this is the coverage probability for lambda
  return(data.frame(lambda = lambda_vec, 
                    cov.prob = coverages_CG))
}



coverage_table_CG <- CG_CP(max_lambda = 50, conf.level = 0.95)

```

\

```{r}
# save coverage table CG for plotting purposes at another time
write_csv(coverage_table_CG, file = here::here("data tables",
                                               "CG table for 95% CPF.csv"))
```

\

```{r}
# plot lambda vs. coverage probability
coverage_table_CG |> 
  ggplot(mapping = aes(x = lambda, # specify x and y variables
                       y = cov.prob)) +
  
  # specify it is a line graph
  geom_line() +
  
  # define the confidence level line
  geom_line(y = 0.95, col = "red", linetype = "dashed") +
  
  # creating axis labels and plot titles
  labs(x = expression(lambda),
       y = "Coverage Probability",
       title = "Coverage Probability for Crow & Gardner's Method",
       subtitle = "for values of the Poisson mean parameter up to 50") +
  
  # label for the confidence level line
  annotate("text", x = 53, y = 0.95, label = "0.95", color = "red") +
  
  # specify x-axis tick breaks
  scale_x_continuous(breaks = seq(0,50,10)) +
  
  # show graph from y = 0.94 to y = 1.0
  scale_y_continuous(limits = c(0.94,1.0))



```
