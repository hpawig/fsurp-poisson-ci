---
title: "Modified Stern (MST) or Optimal Coverage (OC) Script"
author: "Hannah Pawig"
format: html
editor: visual
---

## 

```{r}
#| echo: false
#| message: false
library(tidyverse)
```

## AC max coord function

```{r}
# given AC a-b, this function calculates the maximum's coordinates: (lambda, max-prob)
AC_max_coords <- function(a,b) {
   # using prop 2.2a formula. 
  lambda <- prod(a:b)^(1/(b-a+1)) #prop 2.2a
  
  if (a == 0) {
    max_prob <- ppois(b, lambda) # special case of calculating cdf when a is 0
  } else {
    max_prob <- ppois(b, lambda) - ppois(a-1, lambda) # general formula
  }
  
  return(data.frame(lambda, max_prob))
}


```

## test coverage function

```{r}
test_coverage <- function(A,B, conf.level) {
  
   # this is maximum prob for current cardinality curve

    max_prob <- AC_max_coords(A, B)$max_prob
  
    # cases to decide how to change a-b: look at if max is above conf level
    
    if (max_prob > conf.level) {
      
        return(TRUE)
    
      } else {
      
      return(FALSE)
    }
}
```

## main function

```{r}
# K = largest number of x to create a CI for.
OC <- function(K, conf.level = 0.95, digits = 3, all = F) {
  x <- c(0:K)

  # initialize necessary vectors
  lower <- c()
  upper <- c()

  # step 1  
  a <- 0 # starting a
  b <- 0 # starting b
  lower[1] <- 0



   while (a < (K+1)) {
    # step 2
    
    # this creates the current curve's function so we can find its root.    
    f <- function(lambda) { 
            if (b != 0) {
              return((ppois(b, lambda) - ppois(a-1, lambda)) - conf.level)
            } else {
              return(ppois(b, lambda) - conf.level)
            }
        }  
       
     
      if((test_coverage(a+1, b+1, conf.level) != T)) {
        
        
         # this loop finds interval (start,end) to search for current a-b's root
        start <- AC_max_coords(a, b)$lambda # start searching at current a-b's maximum lambda
        a0 <- (a+1); b0 <- (b+1)
            while (sum(dpois(a0:b0,
                         AC_max_coords(a0, b0)$lambda)) >= conf.level) {
              a0 <- a0+1 
              b0 <- b0+1
            } 
        end <- AC_max_coords(a0, b0)$lambda # end search at next a-b's maximum lambda

        
      # there's an "extra" +1 for indexing purposes
        lower[(b+1)+1] <- uniroot(f, c(start, end))$root # lower limit for (b+1), aka new b
        b <- b + 1

        
     } else {
        # step 3
        
      a <- a + 1
      b <- b + 1
       
      # setting coincidental endpoint (by prop 2.2c)
      lower[b+1] <- AC_max_coords(a, b)$lambda # current b's lower bound
      upper[a] <- lower[b+1]              # a-1's lower bound
       
      }
  
  }
  lower <- lower[1:(K+1)]
  upper <- upper[1:(K+1)]
  x <- x[1:(K+1)] # ensuring all vectors are equal in length. 
                          # b/c extra lower endpoints will be cut off
  lower <- round(lower, digits)
  upper <- round(upper, digits)
  
  CIs <- data.frame(x, lower, upper)
  
  if (all == F) {
    CIs <- CIs |> 
      filter(x == K)
  }
                          
  return(CIs)
}
```

## graph CPF

```{r}
# creating a coverage probability function given one lambda for OC method
cov_prob_OC <- function(lambda, conf.level=0.95) {

    captured <- c() # initialize
    for (x in 0:100) {
      CI_temp <- OC(x, conf.level)
    
      if (dplyr::between(lambda, CI_temp$lower, CI_temp$upper)) {
        captured <- c(captured,x)
      }
    }
    
  # sum pmf of each x that captures lambda in its CI
   p <- 0
    for (y in 1:length(captured)) {
      p <- p + dpois(captured[y], lambda=lambda)

    }
  
 # this is the coverage probability for lambda
  return(p)
}

```

```{r}
# create data frame of all coverage probabilities for lambda = 0 up to lambda = 50
lambda <- c(seq(0,50,0.05))
coverages_OC <- c() # initialize coverage
for (i in (1:length(lambda))) {
  coverages_OC[i] <- cov_prob_OC(lambda=lambda[i])
}
coverage_table_OC.95 <- data.frame(lambda, 
                                   cov.prob = coverages_OC)


```

## plot

```{r}
# plot lambda vs. coverage probability
coverage_table_OC |> 
  ggplot(mapping = aes(x = lambda, # specify x and y variables
                       y = cov.prob)) +
  
  # specify it is a line graph
  geom_line() + 
  
  # define the confidence level line
  geom_line(y = 0.95, col = "red", linetype = "dashed") +
  
  # creating axis labels and plot titles
  labs(x = expression(lambda),
       y = "Coverage Probability",
       title = "Coverage Probability for Optimal Coverage Method",
       subtitle = "for values of the Poisson mean parameter up to 50") +
  
  # label for the confidence level line
  annotate("text", x = 53, y = 0.95, label = "0.95", color = "red") +
  
  # specify x-axis tick breaks
  scale_x_continuous(breaks = seq(0,50,10)) +
  
  # show graph from y = 0.94 to y = 1.0
  scale_y_continuous(limits = c(0.94,1))
```
