---
title: "Blaker's method"
author: "Hannah Pawig"
format: html
editor: visual
---

```{r load}
#| message: false
#| echo: false

library(tidyverse)
```

## function to calculate mtp

```{r}
# calculate MTP for Poisson rvs
get_mtp <- function(x, lambda) {
  if (x != 0) {
    return(# general case
      min(ppois(x, lambda), # P(X<=x)
          (1-ppois(x-1, lambda)))  # P(X >= x)
      ) 
  } else {
    return(
      min(ppois(0, lambda), 1) # P(X >= 0) = 1 always
    ) 
  }
}
```

# main function

-   Blaker's method involves:

    -   find min tail probability (MTP) of observed x

    -   Fix theta; for all x, find MTPs that are as small or smaller than observed MTP and put those x's in $A_\theta$

    -   observed $x \in A_\theta$ if $P(X \in A_\theta) > \alpha$. Record $\theta$

```{r}
# Process
# 1) find min tail probability (MTP) of observed x
# 2) Fix lambda; for all x, find MTPs that are as small or smaller than observed MTP at that lambda. The observed x is always among these
# 3) observed x is in acceptance set of lambda if P(x in A_lambda) > alpha. Record all lambdas
# 4) lower and upper confidence limits given obs.x are smallest and largest lambdas
#   that have acceptance sets with obs. x , respectively


blaker_CI <- function(K, conf.level = 0.95, digits = 2, all = F) {
  alpha <- 1 - conf.level
  lambda_vec <- seq(0, K * 5, 1*10^(-digits)) # vector of lambdas we'll increment through

  
  if (all == T) {
      lower <- c(); upper <- c()
  
  
  for (x in 0:K) {
    # create vector to store all lambda s.t. current x in AS_lambda_vec[i] (*plausible* lambdas)
    p_lambda <- c() 
      for (i in 1:length(lambda_vec)) {
    
        AS <- c() # initialize acceptance set vec for lambda_vec[i]
        x0 <- x
        
        # calculate obs mtp for current lambda
        obs_mtp <- get_mtp(x, lambda_vec[i])
        
        
        # find all x's with MTP <= observed mtp (first round: increment x down)
        while ((get_mtp(x0, lambda_vec[i]) <= obs_mtp) && (x0 >= 0)) {
          # AS will contain all x's resulting in MTP <= obs_mtp at current lambda
          AS <- c(AS, x0);
          x0 <- x0 - 1
        }
        
        x0 <- x + 1
        # find all x's with MTP <= observed mtp (second round: increment x up)
        # stop searching around when x0 gets considerably far from obs x.
        # AS will contain all x's resulting in MTP <= obs_mtp at current lambda
        while ((get_mtp(x0, lambda_vec[i]) <= obs_mtp) && x0 < x*3) { 
          AS <- c(AS, x0)
          x0 <- x0 + 1
        }
        
        
        # calculate probability of X being in acceptance set
        if (0 %in% AS) {
          prob <- ppois(max(AS), lambda_vec[i])
        } else if (length(AS) > 0) {
          prob <- ppois(max(AS), lambda_vec[i]) - ppois(min(AS)-1, lambda_vec[i])
        } else {
          prob <- 0
        }
        
        
        # determine if the user's obs x is in AS for current lambda by comparing to alpha
        if (prob > alpha) {
          p_lambda <- c(p_lambda, lambda_vec[i])
        }
      }
    lower[x+1] <- min(p_lambda)
    upper[x+1] <- max(p_lambda)
    
  }
  
  lower <- lower[1:(K+1)]; upper <- upper[1:(K+1)]
  
  x_vec <- 0:K
  
  CIs <- data.frame(x = x_vec,
                    lower,
                    upper)
  
  
  # 2nd case; user only wants 1 CI
  } else {
    p_lambda <- c() 
    
    for (i in 1:length(lambda_vec)) {
    
        AS <- c() # initialize acceptance set vec for lambda_vec[i]
        x <- K # x represents OBSERVED x / user-inputted x
        x0 <- x
        
        # calculate obs mtp for current lambda
        obs_mtp <- get_mtp(x, lambda_vec[i])
        
        
        # find all x's with MTP <= observed mtp (first round: increment x down)
        while ((get_mtp(x0, lambda_vec[i]) <= obs_mtp) && (x0 >= 0)) {
          # AS will contain all x's resulting in MTP <= obs_mtp at current lambda
          AS <- c(AS, x0);
          x0 <- x0 - 1
        }
        
        x0 <- x + 1
        # find all x's with MTP <= observed mtp (second round: increment x up)
        # stop searching around when x0 gets considerably far from obs x.
        # AS will contain all x's resulting in MTP <= obs_mtp at current lambda
        while ((get_mtp(x0, lambda_vec[i]) <= obs_mtp) && x0 < x*3) { 
          AS <- c(AS, x0)
          x0 <- x0 + 1
        }
        
        
        # calculate probability of X being in acceptance set
        if (0 %in% AS) {
          prob <- ppois(max(AS), lambda_vec[i])
        } else if (length(AS) > 0) {
          prob <- ppois(max(AS), lambda_vec[i]) - ppois(min(AS)-1, lambda_vec[i])
        } else {
          prob <- 0
        }
        
        
        # determine if the user's obs x is in AS for current lambda by comparing to alpha
        if (prob > alpha) {
          p_lambda <- c(p_lambda, lambda_vec[i])
        }
      }
    lower <- min(p_lambda)
    upper <- max(p_lambda)

  
  CIs <- data.frame(x,
                    lower,
                    upper)
    
    
  }
  
  return(CIs)
}


#################################################################
##                           Example                           ##
#################################################################
CI <- blaker_CI(K=20, conf.level = 0.95, all=T); CI
CI <- blaker_CI(K=20, conf.level = 0.95, all=F); CI
```

## CPF Graph for Blaker's method

### function to calculate coverage probability using Blaker's method

```{r}
# creating a coverage probability function given one lambda for B method
blaker_CP <- function(max_lambda, conf.level = 0.95) {

  lambda_vec <- seq(0, max_lambda, 0.01)
  coverages_B <- c() # this vector will contain all coverage probabilities for each lambda in lambda_vec
  
  CI_temp <- blaker_CI(65, conf.level, digits = 4, all = T)
  for (i in 1:length(lambda_vec)) {
    captured <- c() # initialize vector that keeps x's which produce CIs that capture current lambda
    p <- 0
    for (x in 0:65) {
      
      # sum pmf of each x that captures lambda in its CI
      if (dplyr::between(lambda_vec[i], CI_temp$lower[x+1], CI_temp$upper[x+1]) == TRUE) {
        p <- p + dpois(x, lambda = lambda_vec[i])
      }
    }
    print(p)
    coverages_B <- c(coverages_B, p) # add coverage prob to its corresponding vector
  }
    

  
 # this is the coverage probability for lambda
  return(data.frame(lambda = lambda_vec, 
                    cov.prob = coverages_B))
}



coverage_table_B <- blaker_CP(max_lambda = 50, 0.95)
```

## plot

```{r}
# plot lambda vs. coverage probability
coverage_table_B |> 
  ggplot(mapping = aes(x = lambda, # specify x and y variables
                       y = cov.prob)) +
  
  # specify it is a line graph
  geom_line() +
  
  # define the confidence level line
  geom_line(y = 0.95, col = "red", linetype = "dashed") +
  
  # creating axis labels and plot titles
  labs(x = expression(lambda),
       y = "Coverage Probability",
       title = "Coverage Probability for Blaker's Method",
       subtitle = "for values of the Poisson mean parameter up to 50") +
  
  # label for the confidence level line
  annotate("text", x = 53, y = 0.95, label = "0.95", color = "red") +
  
  # specify x-axis tick breaks
  scale_x_continuous(breaks = seq(0,50,10))
```
