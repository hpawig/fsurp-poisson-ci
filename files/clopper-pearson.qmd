---
title: "Clopper-Pearson Method"
format: html
editor: visual
---

```{r packages}
#| message: false
#| code-fold: true
library(tidyverse)

```

# Function

## Calculates C-P CI for Poisson mean parameter

```{r}
# old version.
clopperPearson_CI <- function(x, conf.level = 0.95) {
  x <- sum(x)
  alpha <- 1-conf.level
  
  # lower bound
  lwr <- (1/2)*qchisq(p = alpha/2, df = 2*x)
  
  # upper bound
  uppr <- (1/2)*qchisq(p = 1-alpha/2, df = 2*(x+1))
  
  return(data.frame(lwr, uppr))
}



```

## C-P Coverage Probability plot for Poisson mean parameter

Coverage probability as a function of $\lambda$

```{r}

CP_covprob_table <- function(max_lambda, conf.level = 0.95) {

  lambda_vec <- seq(0, max_lambda, 0.1)
  coverages_CMC <- c() # this vector will contain all coverage probabilities for each lambda in lambda_vec
  
  # using ClopperPearson.pois from strict-methods.R file in 'app files' folder
  CI_temp <- ClopperPearson.pois(K=75, conf.level, T)
  
  for (i in 1:length(lambda_vec)) {
    
    p <- 0
    for (x0 in 0:75) { 
      
      # sum pmf of each x0 that captures lambda in its CI
      if (dplyr::between(lambda_vec[i], CI_temp$lower[x0+1], CI_temp$upper[x0+1])) {
        # will execute if the current lambda is within bounds of CI(x)
        p <- p + dpois(x0, lambda = lambda_vec[i])
      }
    }
    coverages_CMC[i] <- p # add coverage prob to its designated vector
  }
    

  
 # this is the coverage probability for lambda
  return(data.frame(lambda = lambda_vec, 
                    cov.prob = coverages_CMC))
}

coverage_table_CP.95 <- CP_covprob_table(max_lambda = 50, conf.level = 0.95)
```

```{r}
#| message: false
coverage_table_CP.95 |> 
  ggplot(mapping = aes(x = lambda,
                       y = cov.prob)) +
  geom_line(col = "#154533") +
  geom_line(y = 0.95, col = "red", linetype = "dashed") +
  labs(x = expression(lambda),
       y = "Coverage Probability",
       title = "Coverage Probability for the Clopper-Pearson Method",
       subtitle = "for values of the Poisson mean parameter up to 50") +
  scale_x_continuous(
    breaks = seq(0,50,10),
    limits = c(0,54)) +
  scale_y_continuous(limits = c(0.95,1))
  theme_minimal() +
  theme(
        # legend.position = "none",
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border = element_rect(color = "black", fill = NA, size = 1),
        axis.ticks = element_line(size = 0.5),
        axis.ticks.length = unit(2, "mm"),
        axis.text.x = element_text(margin = margin(t = 5)),
        axis.text.y = element_text(margin = margin(r = 5))
  )

```

```{r}
# save plot to images folder
ggsave(filename = here::here("images",
                             "coverageprob-CP.png"),
       width = 6,
       height = 4,
       units = "in",
       dpi = 400)
```
