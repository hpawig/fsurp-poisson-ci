---
title: "Clopper-Pearson Method"
format: 
  html:
    self-contained: true
editor: visual
---

```{r packages}
#| message: false
#| code-fold: true
library(tidyverse)

```

# Function

## Calculates C-P CI for Poisson mean parameter

```{r}
clopperPearson_CI <- function(x, conf.level = 0.95) {
  x <- sum(x)
  alpha <- 1-conf.level
  
  # lower bound
  lwr <- (1/2)*qchisq(p = alpha/2, df = 2*x)
  
  # upper bound
  uppr <- (1/2)*qchisq(p = 1-alpha/2, df = 2*(x+1))
  
  return(data.frame(lwr, uppr))
}



```

## C-P Coverage Probability plot for Poisson mean parameter

Coverage probability as a function of $\lambda$

```{r}
# creates a function calculating coverage probability for one lambda

cov_prob_clopperPearson <- function(lambda, conf.level=0.95) {

    captured <- c() # initialize
    for (x in 0:100) {
      CI_temp <- clopperPearson_CI(x, conf.level)
    
      if (dplyr::between(lambda, CI_temp$lwr, CI_temp$uppr)) {
        captured <- c(captured,x)
      }
    }
    
  # sum pmf of each x that captures lambda in its CI
   p <- 0
    for (y in 1:length(captured)) {
      p <- p + dpois(captured[y], lambda=lambda)

    }
  
 # this is the coverage probability for lambda
  return(p)
}


```

```{r}
lambda <- c(seq(0, 50, by = 0.05))

coverage <- c()
for (i in (1:length(lambda))) {
  coverage[i] <- cov_prob_CloPear(lambda=lambda[i])
}
coverage_table <- data.frame(lambda, coverage)

coverage_table |> 
  ggplot(mapping = aes(x = lambda,
                       y = coverage)) +
  geom_line() +
  geom_line(y = 0.95, col = "red", linetype = "dashed") +
  labs(x = expression(lambda),
       y = "Coverage Probability",
       title = "Coverage Probability for the Clopper-Pearson Method",
       subtitle = "for values of the Poisson mean parameter up to 50") +
  annotate("text", x = 53, y = 0.95, label = "0.95", color = "red") +
  scale_x_continuous(breaks = seq(0,50,10))
```
